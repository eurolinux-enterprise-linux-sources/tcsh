From 0fa39c3be4a6c7adc357183d36cc2773405bfa6e Mon Sep 17 00:00:00 2001
From: "Vojtech Vitek (V-Teq)" <vvitek@redhat.com>
Date: Fri, 24 Feb 2012 15:27:35 +0100
Subject: [PATCH] Opt-in POSIX-like exit $status value by $status_posix_value
 variable

Read TCSH-specific configuration from /etc/csh.tcshrc
---
 sh.h       |    1 +
 sh.proc.c  |    7 +++++++
 sh.proc.h  |    1 +
 sh.set.c   |    5 +++++
 tc.const.c |    1 +
 tcsh.man   |    5 ++++-
 6 files changed, 19 insertions(+), 1 deletions(-)

diff --git a/sh.h b/sh.h
index d7d710a..2c9815f 100644
--- a/sh.h
+++ b/sh.h
@@ -574,6 +574,7 @@ EXTERN int    havhash IZERO;	/* path hashing is available */
 EXTERN int    editing IZERO;	/* doing filename expansion and line editing */
 EXTERN int    noediting IZERO;	/* initial $term defaulted to noedit */
 EXTERN int    bslash_quote IZERO;/* PWP: tcsh-style quoting?  (in sh.c) */
+EXTERN int    tcsh_posix_status IZERO; /* POSIX-like error $status behaviour */
 EXTERN int    compat_expr IZERO;/* csh-style expressions? */
 EXTERN int    isoutatty IZERO;	/* is SHOUT a tty */
 EXTERN int    isdiagatty IZERO;/* is SHDIAG a tty */
diff --git a/sh.proc.c b/sh.proc.c
index 43ea992..4e084e0 100644
--- a/sh.proc.c
+++ b/sh.proc.c
@@ -551,6 +551,11 @@ pjwait(struct process *pp)
     reason = 0;
     fp = pp;
     do {
+	/* In case of POSIX-like behaviour, only the result of the last
+	 * command in pipeline/backq should be taken in account */
+	if (tcsh_posix_status && !(fp->p_flags & PBRACE)
+		&& ((fp->p_flags & PPOU) || (fp->p_flags & PBACKQ)))
+	    continue;
 	if (fp->p_reason)
 	    reason = fp->p_flags & (PSIGNALED | PINTERRUPTED) ?
 		fp->p_reason | META : fp->p_reason;
@@ -726,6 +731,8 @@ palloc(pid_t pid, struct command *t)
 	pp->p_flags |= PBACKQ;
     if (t->t_dflg & F_HUP)
 	pp->p_flags |= PHUP;
+    if (t->t_dcom && t->t_dcom[0] && (*t->t_dcom[0] == '{'))
+	pp->p_flags |= PBRACE;
     if (cmdmax == 0)
 	morecommand(CMD_INIT);
     cmdp = cmdstr;
diff --git a/sh.proc.h b/sh.proc.h
index 48a3771..314270b 100644
--- a/sh.proc.h
+++ b/sh.proc.h
@@ -102,6 +102,7 @@ struct process {
 #define	PNEEDNOTE	(1<<15)	/* notify as soon as practical */
 #define PBACKQ		(1<<16)	/* Process is `` evaluation */
 #define PHUP		(1<<17)	/* Process is marked for SIGHUP on exit */
+#define PBRACE		(1<<18)	/* Process is {} evaluation */
 
 /* defines for arguments to pprint */
 #define	NUMBER		01
diff --git a/sh.set.c b/sh.set.c
index 70b54dc..5490d31 100644
--- a/sh.set.c
+++ b/sh.set.c
@@ -100,6 +100,9 @@ update_vars(Char *vp)
     else if (eq(vp, STRloginsh)) {
 	loginsh = 1;
     }
+    else if (eq(vp, STRtcsh_posix_status)) {
+	tcsh_posix_status = 1;
+    }
     else if (eq(vp, STRsymlinks)) {
 	Char *pn = varval(vp);
 
@@ -757,6 +760,8 @@ unset(Char **v, struct command *c)
 	HistLit = 0;
     if (adrof(STRloginsh) == 0)
 	loginsh = 0;
+    if (adrof(STRtcsh_posix_status) == 0)
+	tcsh_posix_status = 0;
     if (adrof(STRwordchars) == 0)
 	word_chars = STR_WORD_CHARS;
     if (adrof(STRedit) == 0)
diff --git a/tc.const.c b/tc.const.c
index ce2d18b..ee31683 100644
--- a/tc.const.c
+++ b/tc.const.c
@@ -43,6 +43,7 @@ Char STRrootdefautologout[] = { '1', '5', '\0' };
 #endif
 Char STRautomatic[]	= { 'a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c',
 			    '\0' };
+Char STRtcsh_posix_status[] = { 't', 'c', 's', 'h', '_', 'p', 'o', 's', 'i', 'x', '_', 's', 't', 'a', 't', 'u', 's', '\0' };
 Char STRhangup[]	= { 'h', 'a', 'n', 'g', 'u', 'p', '\0' };
 Char STRaout[]		= { 'a', '.', 'o', 'u', 't', '\0' };
 Char STRtty[]		= { 't', 't', 'y', '\0' };
diff --git a/tcsh.man b/tcsh.man
index f2ae4cc..8a6d288 100644
--- a/tcsh.man
+++ b/tcsh.man
@@ -4251,7 +4251,10 @@ Reset to 1 in login shells.
 See also \fBloginsh\fR.
 .TP 8
 .B status
-The status returned by the last command.  If it terminated
+The status of any error in a pipeline or a backquote expansion that is 
+propagated as a result `status', unless `tcsh_posix_status'
+variable is set, and only the last command status is taken in account 
+(the latter is default behaviour in POSIX-like shells). If it terminated
 abnormally, then 0200 is added to the status.  Builtin commands
 which fail return exit status `1', all other builtin commands
 return status `0'.
-- 
1.7.6.2

